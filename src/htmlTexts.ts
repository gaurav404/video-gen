export const first_html = "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>Collision Simulation<\/title>\r\n  <style>\r\n    \/* Basic styling for layout, canvas, and controls *\/\r\n    body {\r\n      font-family: Arial, sans-serif;\r\n      text-align: center;\r\n      margin: 20px;\r\n    }\r\n    canvas {\r\n      border: 1px solid #ccc;\r\n      background: #f9f9f9;\r\n      display: block;\r\n      margin: 10px auto;\r\n    }\r\n    .control-group {\r\n      margin: 10px 0;\r\n    }\r\n    label {\r\n      margin-right: 10px;\r\n    }\r\n    #controls {\r\n      max-width: 800px;\r\n      margin: 0 auto;\r\n      text-align: left;\r\n    }\r\n  <\/style>\r\n<\/head>\r\n<body class=\"check\">\r\n  <h1>Collision Simulation<\/h1>\r\n  <p>\r\n    Adjust the parameters below and choose a collision type.\r\n    Then click \"Start Simulation\" to see two balls collide. The simulation\r\n    demonstrates conservation of momentum and the effects of kinetic energy loss,\r\n    based on the chosen coefficient of restitution.\r\n  <\/p>\r\n\r\n  <div id=\"controls\">\r\n    <div class=\"control-group\">\r\n      <label for=\"mass1\">Mass 1: <span id=\"mass1Val\">2<\/span><\/label>\r\n      <input type=\"range\" id=\"mass1\" min=\"1\" max=\"10\" step=\"0.1\" value=\"2\">\r\n      \r\n      <label for=\"v1\">Initial Velocity 1: <span id=\"v1Val\">2<\/span><\/label>\r\n      <input type=\"range\" id=\"v1\" min=\"-10\" max=\"10\" step=\"0.1\" value=\"2\">\r\n    <\/div>\r\n    <div class=\"control-group\">\r\n      <label for=\"mass2\">Mass 2: <span id=\"mass2Val\">2<\/span><\/label>\r\n      <input type=\"range\" id=\"mass2\" min=\"1\" max=\"10\" step=\"0.1\" value=\"2\">\r\n      \r\n      <label for=\"v2\">Initial Velocity 2: <span id=\"v2Val\">-1<\/span><\/label>\r\n      <input type=\"range\" id=\"v2\" min=\"-10\" max=\"10\" step=\"0.1\" value=\"-1\">\r\n    <\/div>\r\n    <div class=\"control-group\">\r\n      Collision Type:\r\n      <label><input type=\"radio\" name=\"collisionType\" value=\"elastic\" checked> Elastic<\/label>\r\n      <label><input type=\"radio\" name=\"collisionType\" value=\"inelastic\"> Inelastic<\/label>\r\n      <label><input type=\"radio\" name=\"collisionType\" value=\"perfect\"> Perfectly Inelastic<\/label>\r\n    <\/div>\r\n    <div class=\"control-group\" id=\"restitutionGroup\" style=\"display:none;\">\r\n      <label for=\"restitution\">Coefficient of Restitution: <span id=\"restitutionVal\">0.7<\/span><\/label>\r\n      <input type=\"range\" id=\"restitution\" min=\"0\" max=\"1\" step=\"0.01\" value=\"0.7\">\r\n    <\/div>\r\n    <button id=\"startBtn\">Start Simulation<\/button>\r\n    <button id=\"resetBtn\">Reset Simulation<\/button>\r\n  <\/div>\r\n\r\n  <canvas id=\"canvas\" width=\"800\" height=\"400\"><\/canvas>\r\n\r\n  <script>\r\n    \/\/ Get canvas and context\r\n    const canvas = document.getElementById(\"canvas\");\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    \/\/ Global variables for simulation control\r\n    let animationId;\r\n    let simulationRunning = false;\r\n    let collisionOccurred = false; \/\/ flag to process collision only once per approach\r\n\r\n    \/\/ Ball objects (will be initialized later)\r\n    let ball1, ball2;\r\n    \/\/ Coefficient of restitution (will be set based on collision type)\r\n    let restitution = 1;\r\n\r\n    \/\/ Function to update the display value of sliders\r\n    function updateDisplay(id, value) {\r\n      document.getElementById(id).innerText = value;\r\n    }\r\n\r\n    \/\/ Event listeners for slider inputs to update displayed values\r\n    document.getElementById(\"mass1\").addEventListener(\"input\", function() {\r\n      updateDisplay(\"mass1Val\", this.value);\r\n    });\r\n    document.getElementById(\"v1\").addEventListener(\"input\", function() {\r\n      updateDisplay(\"v1Val\", this.value);\r\n    });\r\n    document.getElementById(\"mass2\").addEventListener(\"input\", function() {\r\n      updateDisplay(\"mass2Val\", this.value);\r\n    });\r\n    document.getElementById(\"v2\").addEventListener(\"input\", function() {\r\n      updateDisplay(\"v2Val\", this.value);\r\n    });\r\n    document.getElementById(\"restitution\").addEventListener(\"input\", function() {\r\n      updateDisplay(\"restitutionVal\", this.value);\r\n    });\r\n\r\n    \/\/ Toggle visibility of the Coefficient of Restitution slider based on collision type selection\r\n    const collisionTypeRadios = document.getElementsByName(\"collisionType\");\r\n    for (let radio of collisionTypeRadios) {\r\n      radio.addEventListener(\"change\", function() {\r\n        if (this.value === \"inelastic\") {\r\n          document.getElementById(\"restitutionGroup\").style.display = \"inline-block\";\r\n        } else {\r\n          document.getElementById(\"restitutionGroup\").style.display = \"none\";\r\n        }\r\n      });\r\n    }\r\n\r\n    \/\/ Ball constructor function\r\n    function Ball(x, y, radius, mass, velocity, color) {\r\n      this.x = x;\r\n      this.y = y;\r\n      this.radius = radius;\r\n      this.mass = mass;\r\n      this.velocity = velocity; \/\/ x-direction velocity in pixels per frame\r\n      this.color = color;\r\n    }\r\n\r\n    \/\/ Draw method for a ball\r\n    Ball.prototype.draw = function() {\r\n      ctx.beginPath();\r\n      ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\r\n      ctx.fillStyle = this.color;\r\n      ctx.fill();\r\n      ctx.strokeStyle = \"#000\";\r\n      ctx.stroke();\r\n      \/\/ Display mass inside the ball for clarity\r\n      ctx.fillStyle = \"#000\";\r\n      ctx.font = \"12px Arial\";\r\n      ctx.textAlign = \"center\";\r\n      ctx.fillText(\"m:\" + this.mass, this.x, this.y + 4);\r\n    };\r\n\r\n    \/\/ Initialize the simulation based on control values\r\n    function initSimulation() {\r\n      \/\/ Cancel any ongoing animation\r\n      if (animationId) cancelAnimationFrame(animationId);\r\n      simulationRunning = false;\r\n      collisionOccurred = false;\r\n\r\n      \/\/ Retrieve control values and convert to numbers\r\n      const m1 = parseFloat(document.getElementById(\"mass1\").value);\r\n      const m2 = parseFloat(document.getElementById(\"mass2\").value);\r\n      const v1_initial = parseFloat(document.getElementById(\"v1\").value);\r\n      const v2_initial = parseFloat(document.getElementById(\"v2\").value);\r\n      \r\n      \/\/ Determine collision type and set restitution accordingly\r\n      let collisionType;\r\n      for (let radio of collisionTypeRadios) {\r\n        if (radio.checked) {\r\n          collisionType = radio.value;\r\n          break;\r\n        }\r\n      }\r\n      if (collisionType === \"elastic\") {\r\n        restitution = 1; \/\/ Elastic collision: no kinetic energy lost\r\n      } else if (collisionType === \"perfect\") {\r\n        restitution = 0; \/\/ Perfectly inelastic: objects stick together\r\n      } else if (collisionType === \"inelastic\") {\r\n        restitution = parseFloat(document.getElementById(\"restitution\").value);\r\n      }\r\n\r\n      \/\/ Define ball radii (fixed size for clarity)\r\n      const radius1 = 20;\r\n      const radius2 = 20;\r\n      \/\/ Set initial positions: Ball1 on left, Ball2 on right\r\n      ball1 = new Ball(100, canvas.height \/ 2, radius1, m1, v1_initial, \"#ff6666\");\r\n      ball2 = new Ball(canvas.width - 100, canvas.height \/ 2, radius2, m2, v2_initial, \"#66ccff\");\r\n\r\n      \/\/ Clear canvas and perform an initial draw\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      drawSimulation();\r\n    }\r\n\r\n    \/\/ Update simulation in each animation frame\r\n    function updateSimulation() {\r\n      const dt = 1; \/\/ time step\r\n\r\n      \/\/ Update ball positions based on their velocities\r\n      ball1.x += ball1.velocity * dt;\r\n      ball2.x += ball2.velocity * dt;\r\n\r\n      \/\/ Check for collisions with the walls for both balls and reverse velocity if needed.\r\n      \/\/ For Ball 1:\r\n      if (ball1.x - ball1.radius <= 0) {\r\n        ball1.x = ball1.radius;\r\n        ball1.velocity = -ball1.velocity;\r\n      }\r\n      if (ball1.x + ball1.radius >= canvas.width) {\r\n        ball1.x = canvas.width - ball1.radius;\r\n        ball1.velocity = -ball1.velocity;\r\n      }\r\n      \/\/ For Ball 2:\r\n      if (ball2.x - ball2.radius <= 0) {\r\n        ball2.x = ball2.radius;\r\n        ball2.velocity = -ball2.velocity;\r\n      }\r\n      if (ball2.x + ball2.radius >= canvas.width) {\r\n        ball2.x = canvas.width - ball2.radius;\r\n        ball2.velocity = -ball2.velocity;\r\n      }\r\n\r\n      \/\/ Check for collision between the two balls\r\n      const dx = ball2.x - ball1.x;\r\n      const distance = Math.abs(dx);\r\n      if (distance <= (ball1.radius + ball2.radius)) {\r\n        \/\/ Process collision only once per approach using a flag\r\n        if (!collisionOccurred) {\r\n          const m1 = ball1.mass;\r\n          const m2 = ball2.mass;\r\n          const v1_initial = ball1.velocity;\r\n          const v2_initial = ball2.velocity;\r\n          \/\/ 1D collision equations with coefficient of restitution:\r\n          \/\/ v1' = (m1*v1 + m2*v2 - m2*e*(v1 - v2)) \/ (m1 + m2)\r\n          \/\/ v2' = (m1*v1 + m2*v2 + m1*e*(v1 - v2)) \/ (m1 + m2)\r\n          const newV1 = (m1 * v1_initial + m2 * v2_initial - m2 * restitution * (v1_initial - v2_initial)) \/ (m1 + m2);\r\n          const newV2 = (m1 * v1_initial + m2 * v2_initial + m1 * restitution * (v1_initial - v2_initial)) \/ (m1 + m2);\r\n          ball1.velocity = newV1;\r\n          ball2.velocity = newV2;\r\n          collisionOccurred = true;\r\n        }\r\n      } else {\r\n        \/\/ Reset collision flag when balls are not overlapping\r\n        collisionOccurred = false;\r\n      }\r\n\r\n      \/\/ Clear the canvas and draw the current simulation state\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      drawSimulation();\r\n      drawInfo();\r\n\r\n      \/\/ Request the next animation frame\r\n      animationId = requestAnimationFrame(updateSimulation);\r\n    }\r\n\r\n    \/\/ Draw the balls on the canvas\r\n    function drawSimulation() {\r\n      ball1.draw();\r\n      ball2.draw();\r\n    }\r\n\r\n    \/\/ Draw informational text about momentum and kinetic energy\r\n    function drawInfo() {\r\n      const p1 = ball1.mass * ball1.velocity;\r\n      const p2 = ball2.mass * ball2.velocity;\r\n      const ke1 = 0.5 * ball1.mass * ball1.velocity * ball1.velocity;\r\n      const ke2 = 0.5 * ball2.mass * ball2.velocity * ball2.velocity;\r\n      const totalMomentum = p1 + p2;\r\n      const totalKE = ke1 + ke2;\r\n      ctx.fillStyle = \"#000\";\r\n      ctx.font = \"16px Arial\";\r\n      ctx.textAlign = \"left\";\r\n      ctx.fillText(\"Total Momentum: \" + totalMomentum.toFixed(2), 10, 20);\r\n      ctx.fillText(\"Total Kinetic Energy: \" + totalKE.toFixed(2), 10, 40);\r\n    }\r\n\r\n    \/\/ Event listener for the \"Start Simulation\" button\r\n    document.getElementById(\"startBtn\").addEventListener(\"click\", function() {\r\n      if (!simulationRunning) {\r\n        initSimulation();\r\n        simulationRunning = true;\r\n        updateSimulation();\r\n      }\r\n    });\r\n\r\n    \/\/ Event listener for the \"Reset Simulation\" button\r\n    document.getElementById(\"resetBtn\").addEventListener(\"click\", function() {\r\n      if (animationId) {\r\n        cancelAnimationFrame(animationId);\r\n      }\r\n      simulationRunning = false;\r\n      initSimulation();\r\n    });\r\n\r\n    \/\/ Initialize simulation on page load\r\n    window.onload = function() {\r\n      initSimulation();\r\n    };\r\n  <\/script>\r\n<\/body>\r\n<\/html>"
